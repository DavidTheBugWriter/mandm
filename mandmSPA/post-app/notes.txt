Goal:

==========
need:
    [
        tr[]
        [
        td[]
            [text "wibble1"]
        , td[]
            [text "wibble2"]
        , td[]
            [text "wibble3"]
        , td[]
            [text "wibble4"]
        , td[]
            [text "wibble5"]                                   
        ]
    ]

---
, table []
            [ rhead
            , r1
            ...           

======
> r1 = tr[] [ td [][ text "wibble1"]] 
<internals> : Html msg  -- want this
> r2 = tr[] [ td [][ text "wibble1"], td[][text "wobble"]]
<internals> : Html msg  -- or this
======
function:

> List.concatMap (\x -> x) [[[1,2]],[[3,4]]]
[[1,2],[3,4]] : List (List number)

> List.concatMap (\x -> x) [[[td[][],td[][]]],[[td[][],td[][]]]]
[[<internals>,<internals>],[<internals>,<internals>]]
:  List (List (List (Html msg)))

> List.map (\x -> (tr[][text x])) ["one","two","three","four","five"]
[<internals>,<internals>,<internals>,<internals>,<internals>]  : List (Html msg)


> List.concat(List.concatMap (\x -> x) [ [ [td[][],td[][]] ], [ [td[][],td[][]] ] ])
[<internals>,<internals>,<internals>,<internals>]
    : List (Html msg)

note: f1 = (\x -> x*x)  also: f2 = (\y -> y^y) so f1 (f2 3)

tddata = [  [ [td[][],td[][]] ], 
            [ [td[][],td[][]] ]
         ]
lcm = List.concatMap (\x -> x)
> List.concat((lcm) tddata)
[<internals>,<internals>,<internals>,<internals>]
    : List (Html msg)

or in |> notation: 
> lcm tddata |> List.concat
[<internals>,<internals>,<internals>,<internals>]
    : List (Html msg)

extracting Just values from Maybe types:
> List.filterMap identity [ Just "1", Nothing, Just "3" ]
["1","3"] : List String

======

someRandomMath x =
  let
    y = 5
    z = 10
  in
    (x + y) * z
 
 --------
RawordersToRows : List (List (List (Html msg))) -> Html msg
RawordersToRows b = 
    let concatmap = List.concatMap (\a -> a)
    in
        concatmap b
        |> List.concat
        |> tr[]
 ===========

ordersToRows : List Orders -> List(Html msg)
ordersToRows b = 
    let concatmap = List.concatMap (\a -> a)
    in
        concatmap b
        |> List.concat

===========
types not as aliases:

type Item sku description size stock saving price = Item String String String Int Float Float
type  Order customerid orderid saving total itemlist = Order Int customerid Int orderid Float saving Float total Itemlist itemlist
type  Orders = Orders {orders : List Order}

i1 = Item "SKU1" "Desc" "Size" 23 2.39 12.93
i2 = Item "SKU2" "Another-Life" "Size-XXL" 17 4.99 35.73

order1 = Order {orderid = 1}
orders = Orders {orders=[order1]}

List.map (\x -> x) [order1]
    [Order { orderid = 1 }] : List Order

===========

> type alias Item = {sku : String}
> type alias Order = { orderid : Int}
> type alias Orders = {orders : List Order}

> item1 = Item "sku1"
{ sku = "sku1" } : Item
> item2 = Item "sku2"
{ sku = "sku2" } : Item
> item2 = {sku = "sku2"}

> ord1 = Order 1
{ orderid = 1 } : Order
> ord2 = Order 2
{ orderid = 2 } : Order

> ordlist =[{ orderid = 1 },{ orderid = 2 }]
    : List { orderid : number }

> ord3 = Order 3 -- effectively same as above
> ord4 = Order 4
> foo = Orders [ord1, ord2]
> ol1 = [ord3, ord4]
    : List Order
ol2 = [{ orderid = 1 },{ orderid = 2 }]
    : List { orderid : number } -- c.f. ol1 above

> ol2
foo = Orders [order1]
foo.orders   -- List Order

(
> ord4 3253542
<function> : Int -> Float -> Float -> Order
-- we've created a partially applied function as not given all parameters needed
> ord4 = Order 1251832 1526846 2.99 37.81)

>List.map (\x -> x.orderid) ordlist
[1,2] : List number
    : List { customerid : number }
> List.map (\x -> (tr[][text (String.fromInt x.orderid) ])  ) ordlist.orders
[<internals>,<internals>] : List (Html msg)

viewOrders : List Order -> Html Msg
viewOrders ol = 
    List.map (\x -> x.orders) ol

viewOrders2 : List Order -> List (Html Msg)
viewOrders2 ol = 
    case List.head (List.map (\x -> x.orderid) ol) of --Maybe a
        Just html -> html
        Nothing -> tr[][ td[][text "nothing"]]


viewOrder : Order -> Html Msg
viewOrder o =
    tr[]
    [
        td[][text (String.fromInt o.customerid)]
        , td[][text (String.fromInt o.orderid)]
        , td[][text (String.fromFloat o.shipping)]
        , td[][text (String.fromFloat o.total)]
    ]

viewItem : Item -> List (Html Msg)
viewItem i =
    [
    td[][text i.sku]
    , td[][text i.description]
    , td[][text i.size]
    , td[][text (String.fromFloat i.price)]
    , td[][text (String.fromFloat i.saving)]
    ]


=====
import Html exposing (..)
type alias Item= {sku: String, description:String, size: String, price:Float, saving:Float}
type alias Order = { orderid : Int, customerid : Int, items : List Item, shipping : Float, total : Float}
item1 = {sku="LK363_1", description="Fat Lady Dress", price=23.89, saving=3.88, size="L"}
item2 = {description="Long dress", price=26.40, saving=5.92, size="XL", sku="WEOT344"} 

-- type ItemList= List Item -- doesn't work
-- type  Order = Order { orderid : Int, customerid : Int, items: ItemList, shipping : Float, total : Float}
-- type  Order = Order { orderid : Int, customerid : Int, items:List Item, shipping : Float, total : Float}

order1 = {orderid=1,items=[item1,item2], customerid=122560,shipping=4.99,total=12.38}
order2 = {orderid=2,items=[item1,item2], customerid=72930,shipping=6.99,total=127.27}
-- type Orders = List Order  ? -> type Orders = Orders  (List Order)
-- type alias Orders = {orders : List Order}
type Orders = Orders  (List Order)
orderlist1 = { orders= [order1, order2]}

type Msg = Nil

> viewOrder order1
<internals> : Html Msg

> table[][r1]
<internals> : Html msg
> [r1]
[<internals>] : List (Html msg)
> table[](List.map(\x -> viewOrder x) orderlist1)
<internals> : Html Msg
> 


====

> x = List.head( viewItem item1 )
Just <internals> : Maybe (Html Msg)

> case x of 
|    Just y -> y
|    Nothing -> tr[][ td[][text "nothing"]]
|   
<internals> : Html Msg
